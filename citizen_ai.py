# -*- coding: utf-8 -*-
"""Citizen AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o7A6nNDm7sHcmDrkrflC5lPx5Zs2BhvP
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ---------------- Load model and tokenizer ---------------- #
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure tokenizer has pad/eos tokens
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ---------------- Response Generator ---------------- #
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# ---------------- City Analysis ---------------- #
def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n" \
             f"- Crime index and safety statistics\n" \
             f"- Accident rates and traffic safety information\n" \
             f"- Overall safety overview"
    return generate_response(prompt, max_length=1000)

# ---------------- Citizen Services ---------------- #
def citizen_interaction(query):
    prompt = f"Please provide accurate and helpful information about the following citizen query " \
             f"related to public services, government policies, or civic issues:\n{query}"
    return generate_response(prompt, max_length=1000)

# ---------------- Gradio Interface ---------------- #
with gr.Blocks() as demo:
    gr.Markdown("## City Analysis & Citizen Services AI")

    with gr.Tab("City Analysis"):
        with gr.Row():
            with gr.Column():
                city_input = gr.Textbox(
                    label="City Name",
                    placeholder="Enter a city (e.g., New York, London, Mumbai...)"
                )
                analyze_btn = gr.Button("Analyze City")
            with gr.Column():
                city_output = gr.Textbox(label="City Analysis (Crime Index & Accidents)", lines=15)

        analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

    with gr.Tab("Citizen Services"):
        with gr.Row():
            with gr.Column():
                citizen_query = gr.Textbox(
                    label="Your Query",
                    placeholder="Ask about public services, government policies, civic issues...",
                    lines=4
                )
                query_btn = gr.Button("Get Information")
            with gr.Column():
                citizen_output = gr.Textbox(label="Government Response", lines=15)

        query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

demo.launch(share=True)